{"version":3,"sources":["components/Media.js","store/media.js","components/SearchForm.js","components/ITuneSearch.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","cardMedia","paddingTop","Media","media","classes","Grid","item","xs","sm","md","lg","Card","style","height","CardMedia","image","artworkUrl100","replace","title","className","CardContent","Typography","component","variant","artistName","collectionName","trackName","createSlice","name","initialState","isRequested","isLoading","error","reducers","getMediaRequest","state","getMediaSuccess","payload","getMediaFailed","actions","getMedia","search","dispatch","a","async","axios","get","data","results","toString","textField","button","marginTop","SearchForm","useDispatch","formik","useFormik","initialValues","validationSchema","Yup","shape","required","onSubmit","Box","handleSubmit","mt","mb","container","spacing","alignItems","TextField","errors","touched","helperText","inputProps","getFieldProps","label","placeholder","fullWidth","Button","type","color","size","data-testid","ITuneSearch","useSelector","Container","maxWidth","length","map","key","trackId","display","justifyContent","CircularProgress","store","configureStore","reducer","devTools","theme","appBarIcon","marginRight","App","CssBaseline","AppBar","position","Toolbar","PermMedia","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60d904fe.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles, Card, CardMedia, CardContent, Grid, Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  cardMedia: {\r\n    paddingTop: '56.25%' // 16:9\r\n  }\r\n}));\r\n\r\nfunction Media({ media }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid item xs={6} sm={4} md={3} lg={2}>\r\n      <Card style={{ height: '100%' }}>\r\n        <CardMedia\r\n          image={media.artworkUrl100.replace('100x100bb', '300x300bb')}\r\n          title=\"Image title\"\r\n          className={classes.cardMedia}\r\n        />\r\n        <CardContent>\r\n          <Typography component=\"h2\" variant=\"h5\">\r\n            {media.artistName}\r\n          </Typography>\r\n          <Typography>\r\n            {media.collectionName} - {media.trackName}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Media;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nconst media = createSlice({\r\n  name: 'media',\r\n  initialState: {\r\n    isRequested: false,\r\n    isLoading: false,\r\n    error: null,\r\n    media: []\r\n  },\r\n  reducers: {\r\n    getMediaRequest(state) {\r\n      state.isLoading = true;\r\n      state.media = [];\r\n      state.isRequested = true;\r\n    },\r\n    getMediaSuccess(state, { payload }) {\r\n      state.isLoading = false;\r\n      state.media = payload;\r\n      state.error = null;\r\n    },\r\n    getMediaFailed(state, { payload }) {\r\n      state.isLoading = false;\r\n      state.media = [];\r\n      state.error = payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { getMediaRequest, getMediaSuccess, getMediaFailed } = media.actions;\r\n\r\nexport default media.reducer;\r\n\r\nexport const getMedia = (search) => async (dispatch) => {\r\n  try {\r\n    dispatch(getMediaRequest());\r\n    const { data } = await axios.get(`https://itunes.apple.com/search?term=${search}`);\r\n    dispatch(getMediaSuccess(data.results));\r\n  } catch (error) {\r\n    dispatch(getMediaFailed(error.toString()));\r\n  }\r\n};\r\n","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport { makeStyles, TextField, Button, Grid, Box } from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getMedia } from '../store/media';\r\nimport * as Yup from 'yup';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  textField: {\r\n    height: 68\r\n  },\r\n  button: {\r\n    marginTop: 4\r\n  }\r\n}));\r\n\r\nfunction SearchForm() {\r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      search: ''\r\n    },\r\n    validationSchema: Yup.object().shape({\r\n      search: Yup.string().required('Required')\r\n    }),\r\n    onSubmit: ({ search }) => {\r\n      dispatch(getMedia(search));\r\n    }\r\n  });\r\n\r\n  return (\r\n    <Box component=\"form\" onSubmit={formik.handleSubmit} mt={3} mb={3}>\r\n      <Grid container spacing={3} alignItems=\"flex-start\">\r\n        <Grid item xs={8} sm={9} lg={10}>\r\n          <TextField\r\n            error={formik.errors.search && formik.touched.search}\r\n            helperText={formik.errors.search}\r\n            name=\"search\"\r\n            inputProps={formik.getFieldProps('search')}\r\n            label=\"Search Key\"\r\n            placeholder=\"Search Key\"\r\n            fullWidth\r\n            className={classes.textField}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={4} sm={3} lg={2}>\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            fullWidth\r\n            className={classes.button}\r\n            data-testid=\"search\"\r\n          >\r\n            Search\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default SearchForm;\r\n","import React from 'react';\r\nimport { Container, Grid, Typography, Box, CircularProgress } from '@material-ui/core';\r\nimport Media from './Media';\r\nimport SearchForm from './SearchForm';\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction ITuneSearch() {\r\n  const { media, isRequested, isLoading, error } = useSelector((state) => state.media);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <SearchForm />\r\n      {media.length ? (\r\n        <Grid container spacing={3}>\r\n          {media.map((media) => <Media key={media.trackId} media={media} />)}\r\n        </Grid>\r\n      ) : (\r\n        <Box mt={3} display=\"flex\" justifyContent=\"center\">\r\n          {isLoading ? (\r\n            <CircularProgress />\r\n          ) : error ? (\r\n            <Typography variant=\"h5\" color=\"secondary\">\r\n              {error}\r\n            </Typography>\r\n          ) : isRequested ? (\r\n            <Typography variant=\"h5\">No result found</Typography>\r\n          ) : (\r\n            <Typography variant=\"h5\" color=\"primary\">\r\n              Enter keyword and click search\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ITuneSearch;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport media from './media';\r\n\r\nconst store = configureStore({\r\n  reducer: { media },\r\n  devTools: true\r\n});\r\n\r\nexport default store;\r\n","import React, { Fragment } from 'react';\nimport { Toolbar, CssBaseline, AppBar, Typography, makeStyles } from '@material-ui/core';\nimport { PermMedia } from '@material-ui/icons';\nimport ITuneSearch from './components/ITuneSearch';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nconst useStyles = makeStyles((theme) => ({\n  appBarIcon: {\n    marginRight: theme.spacing(2)\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <Provider store={store}>\n      <Fragment>\n        <CssBaseline />\n        <AppBar position=\"relative\">\n          <Toolbar>\n            <PermMedia className={classes.appBarIcon} />\n            <Typography variant=\"h6\">React iTune Search</Typography>\n          </Toolbar>\n        </AppBar>\n        <ITuneSearch />\n      </Fragment>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}